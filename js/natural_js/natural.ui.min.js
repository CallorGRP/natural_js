/*!
 * Natural-UI v0.8.2.5
 * bbalganjjm@gmail.com
 *
 * Copyright 2014 KIM HWANG MAN
 * Released under the LGPL license
 *
 * Date: 2014-09-26T11:11Z
 */
(function(F, $) {
    var G = "0.8.2.6";
    $.fn.extend(N, {
        "Natural-UI": G
    });
    N.fn = N.prototype = {
        constructor: N,
        alert: function(a, b) {
            return new N.alert(this, a, b)
        },
        button: function(a) {
            if (this.is("input[type='button'], button, a")) {
                return this.each(function() {
                    return new N.button(N(this), a)
                })
            }
        },
        select: function(a) {
            return new N.select(this, a)
        },
        form: function(a) {
            return new N.form(this, a)
        },
        grid: function(a) {
            return new N.grid(this, a)
        },
        popup: function(a) {
            return new N.popup(this, a)
        },
        tab: function(a) {
            return new N.tab(this, a)
        },
        datepicker: function(a) {
            return new N.datepicker(this, a)
        }
    };
    $.fn.extend(N.fn);
    (function(N) {
        var x = N.alert = function(a, b, c) {
            this.options = {
                obj: a,
                context: a,
                container: null,
                msgContext: N(),
                msgContents: null,
                msg: b,
                vars: c,
                width: 0,
                height: 0,
                isInput: false,
                isWindow: a.get(0) === F || a.get(0) === F.document,
                title: a.get(0) === F || a.get(0) === F.document ? undefined : a.attr("title"),
                button: true,
                closeMode: "remove",
                modal: true,
                onOk: null,
                onCancel: null,
                overlayColor: null,
                alwaysOnTop: false,
                "confirm": false
            };
            try {
                this.options.container = N.context.attr("architecture").page.context;
                this.options = $.extend({}, this.options, N.context.attr("ui")["alert"]);
                this.options.container = N(this.options.container)
            } catch (e) {
                N.error("[N.alert]" + e, e)
            }
            if (a.is(":input")) {
                this.options.isInput = true
            }
            if (b !== undefined && N.isPlainObject(b)) {
                $.extend(this.options, b)
            }
            if (this.options.isWindow) {
                this.options.context = N("body")
            }
            if (!this.options.isInput) {
                x.wrapEle.call(this)
            } else {
                x.wrapInputEle.call(this)
            }
            this.options.context.instance("alert", this);
            return this
        };
        x.fn = x.prototype;
        $.extend(x.fn, {
            "context": function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            "show": function() {
                var a = this.options;
                if (!a.isInput) {
                    x.resetOffSetEle(a);
                    a.time = setInterval(function() {
                        x.resetOffSetEle(a)
                    }, 100);
                    a.msgContents.show()
                } else {
                    if (!N.isEmptyObject(a.msg)) {
                        x.resetOffSetInputEle(a);
                        $(F).bind("scroll.alert.show, resize.alert.show", function() {
                            x.resetOffSetInputEle(a)
                        });
                        a.msgContext.fadeIn(150, function() {
                            setTimeout(function() {
                                a.msgContext.fadeOut(1500, function() {
                                    a.msgContext.find("a.msg_close__").click()
                                });
                                clearInterval(a.time)
                            }, a.input.displayTimeout)
                        })
                    }
                }
                var b = this;
                $(document).bind("keyup.alert", function(e) {
                    if (e.keyCode == 27) {
                        b[a.closeMode]()
                    }
                });
                return this
            },
            "hide": function() {
                var a = this.options;
                clearInterval(a.time);
                if (!a.isInput) {
                    a.msgContext.hide();
                    a.msgContents.hide()
                } else {
                    a.msgContext.remove()
                }
                $(document).unbind("keyup.alert");
                if (a.isInput) {
                    $(F).unbind("scroll.alert.show, resize.alert.show")
                }
                return this
            },
            "remove": function() {
                var a = this.options;
                clearInterval(a.time);
                if (!a.isInput) {
                    a.msgContext.remove();
                    a.msgContents.remove()
                } else {
                    a.msgContext.remove()
                }
                $(document).unbind("keyup.alert");
                if (a.isInput) {
                    $(F).unbind("scroll.alert.show, resize.alert.show")
                }
                return this
            }
        });
        $.extend(x, {
            wrapEle: function() {
                var a = this.options;
                var b = {
                    "display": "none",
                    "position": a.isWindow ? "fixed" : "absolute",
                    "cursor": "not-allowed",
                    "padding": 0
                };
                if (!a.isWindow) {
                    b["border-radius"] = a.context.css("border-radius") != "0px" ? a.context.css("border-radius") : "0px"
                }
                var c = 0;
                if (a.alwaysOnTop) {
                    c = N.element.maxZindex(a.container.find("div, span, ul, p"));
                    b["z-index"] = String(c + 1)
                }
                if (a.overlayColor !== null) {
                    b["background-color"] = a.overlayColor
                }
                a.msgContext = a.container.append($('<div class="block_overlay__" onselectstart="return false;"></div>').css(b)).find("div.block_overlay__:last");
                if (a.vars !== undefined) {
                    a.msg = N.message.replaceMsgVars(a.msg, a.vars)
                }
                var d = {
                    "display": "none",
                    "position": "absolute"
                };
                if (a.alwaysOnTop) {
                    d["z-index"] = String(c + 2)
                }
                var f = '';
                if (a.title !== undefined) {
                    f = '<li class="msg_title_box__">' + a.title + '</li>'
                }
                var g = '';
                if (a.button) {
                    g = '<li class="buttonBox__">' + '<a href="#" class="confirm__">' + N.message.get(a.message, "confirm") + '</a>' + '<a href="#" class="cancel__">' + N.message.get(a.message, "cancel") + '</a>' + '</li>'
                }
                a.msgContents = a.msgContext.after($('<span class="block_overlay_msg__"><ul>' + f + '<li class="msg_box__"></li>' + g + '</ul></span>').css(d)).next("span.block_overlay_msg__:last");
                a.msgContents.find("li.msg_box__").html(a.msg);
                if (a.width > 0) {
                    a.msgContents.find("li.msg_box__").width(a.width)
                }
                if (a.height > 0) {
                    a.msgContents.find("li.msg_box__").height(a.height);
                    a.msgContents.find("li.msg_box__").css("overflow-y", "auto")
                }
                var h = this;
                a.msgContents.find("li.buttonBox__ a.confirm__").button(a.global.okBtnStyle);
                a.msgContents.find("li.buttonBox__ a.confirm__").click(function(e) {
                    e.preventDefault();
                    if (a.onOk !== null) {
                        a.onOk.call(h, a.msgContext, a.msgContents)
                    }
                    h[a.closeMode]()
                });
                if (!a.modal) {
                    a.msgContext.remove()
                }
                if (a.confirm) {
                    a.msgContents.find("li.buttonBox__ a.cancel__").button(a.global.cancelBtnStyle);
                    a.msgContents.find("li.buttonBox__ a.cancel__").click(function(e) {
                        e.preventDefault();
                        if (a.onCancel !== null) {
                            a.onCancel(a.msgContext, a.msgContents)
                        }
                        h[a.closeMode]()
                    })
                } else {
                    a.msgContents.find("a.cancel__").remove()
                }
            },
            resetOffSetEle: function(a) {
                var b = a.context.closest(".tab__");
                if (a.context.outerWidth() > 0 && (b.length > 0 && b.find(b.find("> ul > li.tab_active__ > a").attr("href")).is(":visible"))) {
                    var c = a.context.position();
                    var d = a.context;
                    var e = a.msgContext a.msgContext.css({
                        "top": a.isWindow ? 0 : c.top + "px",
                        "left": a.isWindow ? 0 : c.left + "px",
                        "height": a.isWindow ? N(F.document).height() : a.context.outerHeight() + "px",
                        "width": a.isWindow ? N(F.document).width() : a.context.outerWidth() + "px"
                    }).show();
                    var f = {
                        "top": (((a.isWindow ? N(a.obj).height() : a.msgContext.height()) / 2 + c.top) - a.msgContents.height() / 2) + "px",
                        "left": ((a.msgContext.width() / 2 + c.left) - parseInt(a.msgContents.width() / 2)) + "px"
                    };
                    if (a.isWindow) {
                        f.position = "fixed"
                    }
                    a.msgContents.css(f).show()
                } else {
                    a.msgContext.hide();
                    a.msgContents.hide()
                }
            },
            wrapInputEle: function() {
                var b = this.options;
                if (b.context.instance("alert") !== undefined) {
                    b.context.instance("alert").remove()
                }
                b.msgContext = b.context.next("span.msg__");
                if (b.msgContext.length == 0) {
                    b.msgContext = b.context.after('<span class="msg__"><ul class="msg_line_box__"></ul></span>').next("span.msg__").css({
                        "display": "none",
                        "position": "fixed"
                    });
                    b.msgContext.append('<a href="#" class="msg_close__">' + b.input.closeBtn + '</a>');
                    b.msgContext.prepend('<ul class="msg_arrow__"></ul>')
                }
                if (b.alwaysOnTop) {
                    b.msgContext.css("z-index", N.element.maxZindex(b.container.find("div, span, ul, p")) + 1)
                }
                if (N.isEmptyObject(b.msg)) {
                    this.remove()
                }
                var c = this;
                b.msgContext.find("a.msg_close__").click(function(e) {
                    e.preventDefault();
                    c.remove()
                });
                var d = b.msgContext.find("ul.msg_line_box__");
                if (N.isArray(b.msg)) {
                    b.msgContext.find("ul.msg_line_box__").empty();
                    $(b.msg).each(function(i, a) {
                        if (b.vars !== undefined) {
                            b.msg[i] = N.message.replaceMsgVars(a, b.vars)
                        }
                        d.append('<li>' + b.input.bullets + b.msg[i] + '</li>')
                    })
                } else {
                    if (b.vars !== undefined) {
                        b.msg = N.message.replaceMsgVars(msg, b.vars)
                    }
                    d.append('<li>' + b.input.bullets + b.msg + '</li>')
                }
            },
            resetOffSetInputEle: function(a) {
                var b = a.context.offset().left;
                var c = b + a.context.outerWidth();
                if (c + 14 < $(F).width()) {
                    a.msgContext.offset({
                        left: c,
                        top: a.context.offset().top + 1
                    })
                } else {
                    a.msgContext.offset({
                        left: b,
                        top: a.context.offset().top + 1
                    })
                }
            }
        });
        var y = N.button = function(a, b) {
            this.options = {
                context: a,
                size: "medium",
                color: "white",
                disable: false,
                effect: true
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["button"])
            } catch (e) {
                N.error("[N.button]" + e, e)
            }
            $.extend(this.options, N.element.toOpts(this.options.context));
            if (b !== undefined) {
                $.extend(this.options, b)
            }
            y.wrapEle.call(this);
            this.options.context.instance("button", this);
            return this
        };
        y.fn = y.prototype;
        $.extend(y.fn, {
            context: function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            disable: function() {
                var a = this.options.context;
                if (this.options.effect) {
                    a.fadeTo(150, "0.6")
                } else {
                    a.css("opacity", "0.6")
                }
                if (a.is("a")) {
                    a.unbind("click.button");
                    a.tpBind("click.button", N.element.disable)
                } else {
                    a.prop("disabled", true)
                }
                a.addClass("disabled");
                return this
            },
            enable: function() {
                var a = this.options.context;
                if (this.options.effect) {
                    a.fadeTo(150, "1")
                } else {
                    a.css("opacity", "1")
                }
                if (a.is("a")) {
                    a.unbind("click", N.element.disable)
                } else {
                    a.prop("disabled", false)
                }
                a.removeClass("disabled");
                return this
            }
        });
        $.extend(y, {
            wrapEle: function() {
                var a = this.options;
                if (a.disable) {
                    this.disable()
                } else {
                    this.enable()
                }
                if (a.context.is("a")) {
                    a.context.attr("onselectstart", "return false;")
                }
                if (a.context.is("a") || a.context.is("button") || a.context.is("input[type='button']")) {
                    a.context.removeClass("btn_common__ btn_white__ btn_blue__ btn_skyblue__ btn_gray__ btn_smaller__ btn_small__ btn_medium__ btn_large__ btn_big__");
                    a.context.addClass("btn_common__ btn_" + a.color + "__ btn_" + a.size + "__");
                    if (N.browser.msieVersion() === 8 && a.context.is("a")) {
                        a.context.css("line-height", "");
                        if (a.size === "smaller") {
                            a.context.css("line-height", "17px")
                        } else if (a.size === "small") {
                            a.context.css("line-height", "21px")
                        } else if (a.size === "medium") {
                            a.context.css("line-height", "26px")
                        } else if (a.size === "large") {
                            a.context.css("line-height", "34px")
                        } else if (a.size === "big") {
                            a.context.css("line-height", "48px")
                        }
                    }
                    if (N.browser.msieVersion() === 9) {
                        if (a.context.is("a")) {
                            a.context.css("line-height", "")
                        }
                        a.context.css("line-height", (parseInt(a.context.css("line-height")) - 3) + "px")
                    }
                    a.context.unbind("mouseover.button mousedown.button mouseup.button mouseout.button");
                    a.context.bind("mouseover.button", function() {
                        if (!a.context.hasClass("disabled")) {
                            if (N.browser.msieVersion() === 0 || N.browser.msieVersion() > 8) {
                                $(this).css("box-shadow", "rgba(0, 0, 0, 0.2) 1px 1px 1px inset")
                            } else {
                                if (a.effect) {
                                    $(this).fadeTo(100, "0.9")
                                } else {
                                    $(this).css("opacity", "0.9")
                                }
                            }
                        }
                    });
                    a.context.bind("mousedown.button", function() {
                        if (!a.context.hasClass("disabled")) {
                            if (N.browser.msieVersion() === 0 || N.browser.msieVersion() > 8) {
                                $(this).css("box-shadow", "rgba(0, 0, 0, 0.2) 3px 3px 3px inset")
                            } else {
                                if (a.effect) {
                                    $(this).fadeTo(100, "0.7")
                                } else {
                                    $(this).css("opacity", "0.7")
                                }
                            }
                        }
                    });
                    a.context.bind("mouseup.button", function() {
                        if (!a.context.hasClass("disabled")) {
                            if (N.browser.msieVersion() === 0 || N.browser.msieVersion() > 8) {
                                $(this).css("box-shadow", "none")
                            } else {
                                if (a.effect) {
                                    $(this).fadeTo(100, "1")
                                } else {
                                    $(this).css("opacity", "1")
                                }
                            }
                        }
                    });
                    a.context.bind("mouseout.button", function() {
                        if (!a.context.hasClass("disabled")) {
                            if (N.browser.msieVersion() === 0 || N.browser.msieVersion() > 8) {
                                $(this).css("box-shadow", "none")
                            } else {
                                if (a.effect) {
                                    $(this).fadeTo(100, "1")
                                } else {
                                    $(this).css("opacity", "1")
                                }
                            }
                        }
                    })
                }
            }
        });
        var z = N.datepicker = function(a, b) {
            this.options = {
                context: a,
                contents: $('<div class="datepicker__"></div>'),
                monthonly: false,
                mouseonly: true,
                focusin: true,
                onSelect: null
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["datepicker"])
            } catch (e) {
                N.error("[N.datepicker]" + e, e)
            }
            if (b !== undefined) {
                $.extend(this.options, b)
            }
            this.options.context.addClass("datepicker__");
            if (this.options.mouseonly) {
                this.options.context.css("cursor", "pointer");
                this.options.context.prop("readonly", true)
            }
            z.wrapEle.call(this);
            this.options.context.instance("datepicker", this)
        };
        z.fn = z.prototype;
        $.extend(z.fn, {
            show: function() {
                var a = this.options;
                var b = this;
                a.contents.fadeIn(150);
                $(document).bind("keyup.datepicker", function(e) {
                    if (e.keyCode == 27) {
                        b.hide()
                    }
                });
                return this
            },
            hide: function() {
                $(document).unbind("keyup.datepicker");
                $(F).unbind("resize.datepicker");
                this.options.contents.fadeOut(150);
                this.options.context.get(0).blur();
                return this
            }
        });
        $.extend(z, {
            context: function() {
                return this.options.context
            },
            wrapEle: function() {
                var l = this.options;
                var m = this;
                var d = new Date();
                var n = parseInt(d.formatDate("Y"));
                l.contents = $('<div class="datepicker_contents__"></div>');
                l.contents.css({
                    display: "none",
                    position: "absolute"
                });
                var o = $('<div class="datepicker_years_panel__"></div>');
                o.css({
                    "width": "40px",
                    "float": "left"
                });
                var p = $('<div align="center"></div>');
                p.css({
                    "line-height": "25px"
                }).click(function(e) {
                    e.preventDefault();
                    o.find("div.datepicker_year_item__").removeClass("datepicker_year_selected__");
                    $(this).addClass("datepicker_year_selected__")
                });
                var q;
                o.append(p.clone(true).addClass("datepicker_year_title__").text(N.message.get(l.message, "year")));
                for (var i = n - 2; i <= n + 2; i++) {
                    q = p.clone(true).addClass("datepicker_year_item__");
                    if (i === n) {
                        q.addClass("datepicker_curr_year__");
                        q.addClass("datepicker_year_selected__")
                    }
                    o.append(q.text(String(i)))
                }
                var r = $('<div class="datepicker_year_paging__" align="center"><a href="#" class="datepicker_year_prev__" title="이전">◀</a> <a href="#" class="datepicker_year_next__" title="다음">▶</a></div>');
                r.css({
                    "line-height": "25px"
                });
                r.find("a.datepicker_year_prev__").click(function(e) {
                    e.preventDefault();
                    z.yearPaging(o.find("div.datepicker_year_item__"), n, -5)
                });
                r.find("a.datepicker_year_next__").click(function(e) {
                    e.preventDefault();
                    z.yearPaging(o.find("div.datepicker_year_item__"), n, 5)
                });
                o.append(r);
                l.contents.append(o);
                var s = $('<div class="datepicker_months_panel__"></div>');
                s.css({
                    "width": "60px",
                    "float": "left",
                    "margin-left": "3px"
                });
                var t = $('<div align="center"></div>');
                t.css({
                    "line-height": "25px",
                    "width": "28px",
                    "float": "left"
                }).click(function(e) {
                    e.preventDefault();
                    s.find("div.datepicker_month_item__").removeClass("datepicker_month_selected__");
                    $(this).addClass("datepicker_month_selected__");
                    if (l.monthonly) {
                        var a = N.date.strToDate(o.find("div.datepicker_year_selected__").text() + N.string.lpad($(this).text(), 2, "0"));
                        var b;
                        if (l.onSelect !== null) {
                            b = l.onSelect(l.context, a)
                        }
                        if (b === undefined || b === true) {
                            l.context.val(a.obj.formatDate(a.format))
                        }
                        m.hide()
                    } else {
                        v.empty();
                        var c = N.date.strToDate(o.find("div.datepicker_year_selected__").text() + N.string.lpad($(this).text(), 2, "0"));
                        var d = c.obj.getDate();
                        c.obj.setDate(1);
                        var f = c.obj.getDay();
                        for (var i = 0; i < u.length; i++) {
                            v.append(w.clone().addClass("datepicker_day__").text(u[i]))
                        }
                        var g = N.date.strToDate(o.find("div.datepicker_year_selected__").text() + N.string.lpad(String(parseInt($(this).text()) - 1), 2, "0"));
                        var h = g.obj.getDate();
                        var j;
                        var k;
                        for (var i = 1 - f; i <= 42 - f; i++) {
                            j = String(i);
                            k = w.clone(true);
                            if (i <= 0) {
                                k.addClass("datepicker_prev_day_item__");
                                j = String(h + i)
                            } else if (i > d) {
                                k.addClass("datepicker_next_day_item__");
                                j = String(i - d)
                            } else {
                                k.addClass("datepicker_day_item__")
                            }
                            v.append(k.text(j))
                        }
                    }
                });
                s.append(t.clone().css("width", "58px").addClass("datepicker_month_title__").text(N.message.get(l.message, "month")));
                for (var i = 1; i <= 12; i++) {
                    s.append(t.clone(true).addClass("datepicker_month_item__").text(String(i)))
                }
                l.contents.append(s);
                if (!l.monthonly) {
                    var u = N.message.get(l.message, "days").split(",");
                    var v = $('<div class="datepicker_days_panel__"></div>');
                    v.css({
                        "width": "210px",
                        "float": "left",
                        "margin-left": "3px"
                    });
                    var w = $('<div align="center"></div>');
                    w.css({
                        "line-height": "25px",
                        "width": "28px",
                        "float": "left"
                    }).click(function(e) {
                        e.preventDefault();
                        var a = $(this);
                        v.find("div.datepicker_prev_day_item__, div.datepicker_day_item__, div.datepicker_next_day_item__").removeClass("datepicker_day_selected__");
                        a.addClass("datepicker_day_selected__");
                        var b;
                        if (a.hasClass("datepicker_prev_day_item__")) {
                            b = String(parseInt(s.find("div.datepicker_month_selected__").text()) - 1)
                        } else if (a.hasClass("datepicker_next_day_item__")) {
                            b = String(parseInt(s.find("div.datepicker_month_selected__").text()) + 1)
                        } else {
                            b = s.find("div.datepicker_month_selected__").text()
                        }
                        var c = N.date.strToDate(o.find("div.datepicker_year_selected__").text() + N.string.lpad(b, 2, "0") + N.string.lpad(a.text(), 2, "0"));
                        var d;
                        if (l.onSelect !== null) {
                            d = l.onSelect(l.context, c)
                        }
                        if (d === undefined || d === true) {
                            l.context.val(c.obj.formatDate(c.format))
                        }
                        m.hide()
                    });
                    l.contents.append(v);
                    s.find("div:contains(" + String(parseInt(d.formatDate("m"))) + ")").click()
                }
                l.context.after(l.contents);
                $(F).bind("resize.datepicker", function() {
                    var a = l.context.offset().left;
                    if (a + l.contents.width() > $(F).width()) {
                        l.contents.css("right", ($(F).width() - (a + l.context.outerWidth())) + "px")
                    } else {
                        l.contents.css("left", a + "px")
                    }
                }).trigger("resize.datepicker");
                if (l.focusin) {
                    l.context.bind("focusin.datepicker", function() {
                        m.show()
                    })
                }
            },
            yearPaging: function(b, c, d) {
                b.removeClass("datepicker_curr_year__");
                b.each(function() {
                    var a = $(this);
                    a.text(String(parseInt(a.text()) + d));
                    if (a.text() === String(c)) {
                        a.addClass("datepicker_curr_year__")
                    }
                })
            }
        });
        var A = N.popup = function(b, c) {
            this.options = {
                context: b,
                url: null,
                title: null,
                button: true,
                modal: true,
                height: 0,
                width: 0,
                closeMode: "hide",
                alwaysOnTop: false,
                "confirm": true,
                onOk: null,
                onCancel: null,
                onOpen: null,
                onOpenData: null,
                onClose: null,
                onCloseData: null,
                preload: false
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["popup"])
            } catch (e) {
                N.error("[N.popup]" + e, e)
            }
            if (c !== undefined) {
                if (N.type(c) === "string") {
                    this.options.url = c
                } else {
                    if (arguments.length === 1 && N.isPlainObject(b)) {
                        $.extend(this.options, b)
                    } else {
                        $.extend(this.options, c)
                    }
                    if (N.type(this.options.context) === "string") {
                        this.options.context = N(this.options.context)
                    }
                }
            }
            try {
                var d = arguments.callee.caller.arguments.callee.caller.arguments[0];
                if (d.instance !== undefined) {
                    this.opener = d.instance("cont")
                } else {
                    this.opener = $(d.target).closest(".view_context__").instance("cont")
                }
            } catch (e) {
                if (this.options.url !== null) {
                    N.warn("[N.popup][" + e + "] Don't set opener object in popup's Controller")
                }
            }
            if (this.options.url !== null) {
                if (this.options.preload) {
                    A.loadEle.call(this, function(a) {
                        this.options.context = a;
                        this.options.context.instance("popup", this)
                    })
                }
            } else {
                A.wrapEle.call(this);
                this.options.context.instance("popup", this)
            }
            return this
        };
        A.fn = A.prototype;
        $.extend(A.fn, {
            context: function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            open: function(b) {
                var c = this.options;
                var d = this;
                if (this.options.url !== null && !c.preload) {
                    A.loadEle.call(this, function(a) {
                        c.context = a;
                        c.context.instance("popup", this);
                        A.popOpen.call(d, b)
                    });
                    c.preload = true
                } else {
                    A.popOpen.call(this, b)
                }
                return this
            },
            close: function(a) {
                var b = this.options;
                if (b.onClose !== null) {
                    if (a !== undefined) {
                        b.onCloseData = a
                    }
                    b.onClose.call(this, b.onCloseData)
                }
                this.alert.hide();
                return this
            },
            changeEvent: function(a, b) {
                this.options[a] = b;
                this.alert.options[a] = this.options[a]
            },
            remove: function() {
                this.alert.remove();
                return this
            }
        });
        $.extend(A, {
            wrapEle: function() {
                var a = this.options;
                a.context.hide();
                a.msg = a.context;
                if (a.title === null) {
                    a.title = a.context.attr("title");
                    a.context.removeAttr("title")
                }
                this.alert = N(F).alert(a);
                this.alert.options.msgContext.addClass("popup_overlay__");
                this.alert.options.msgContents.addClass("popup__")
            },
            loadEle: function(c) {
                var d = this.options;
                var e = this;
                N.comm({
                    url: d.url,
                    contentType: "application/x-www-form-urlencoded",
                    dataType: "html"
                }).submit(function(a) {
                    d.context = $(a);
                    if (d.title === null) {
                        d.title = d.context.attr("title");
                        d.context.removeAttr("title")
                    }
                    d.msg = d.context;
                    e.alert = N(F).alert(d);
                    e.alert.options.msgContext.addClass("popup_overlay__");
                    e.alert.options.msgContents.addClass("popup__");
                    var b = d.context.instance("cont");
                    if (b !== undefined) {
                        b.request = this.request;
                        b.caller = e;
                        if (e.opener !== undefined) {
                            b["opener"] = e.opener
                        }
                        if (b.init !== undefined) {
                            b.init(b.view, this.request)
                        }
                    }
                    c.call(e, d.context)
                })
            },
            popOpen: function(a) {
                var b = this.options;
                var c = this;
                if (b.url === null) {
                    b.context.show()
                }
                c.alert.show();
                if (b.onOpen !== null) {
                    if (a !== undefined) {
                        b.onOpenData = a
                    }
                    if (b.context.instance("cont")[b.onOpen] !== undefined) {
                        b.context.instance("cont")[b.onOpen](b.onOpenData)
                    } else {
                        N.warn("[N.popup.popOpen]onOpen callback function \"" + b.onOpen + "\" is undefined in popup content's Service Controller")
                    }
                }
            }
        });
        var B = N.tab = function(b, c) {
            this.options = {
                context: b,
                links: b.find("li"),
                classOpts: [],
                randomSel: false,
                onActive: null,
                contents: b.find("> div"),
                effect: false
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["tab"])
            } catch (e) {
                N.error("[N.tab]" + e, e)
            }
            var d = this;
            var f;
            this.options.links.each(function(i) {
                var a = $(this);
                f = N.element.toOpts(a);
                if (f === undefined) {
                    f = {}
                }
                f.target = a.find("a").attr("href");
                d.options.classOpts.push(f)
            });
            if (c !== undefined) {
                $.extend(this.options, c)
            }
            this.options.context.addClass("tab__");
            B.wrapEle.call(this);
            this.options.context.instance("tab", this)
        };
        B.fn = B.prototype;
        $.extend(B.fn, {
            open: function(a) {
                if (a !== undefined) {
                    $(this.options.links.get(a)).click()
                }
                return this
            }
        });
        $.extend(B, {
            context: function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            wrapEle: function() {
                var g = this.options;
                g.contents.hide();
                var h = this;
                var j;
                $(g.classOpts).each(function(i) {
                    if (this["active"] !== undefined && this["active"]) {
                        j = i
                    } else {
                        if (g.randomSel) {
                            j = Math.floor(Math.random() * g.links.length)
                        } else {
                            if (i === 0) {
                                j = i
                            }
                        }
                    }
                    if (this.preload !== undefined && this.preload === true) {
                        if (this.url !== undefined) {
                            B.loadContent.call(h, this.url, i)
                        }
                    }
                });
                g.links.bind("click.tab", function(e) {
                    e.preventDefault();
                    var a = $(this);
                    var b = g.links.index(this);
                    var c = g.classOpts[b];
                    g.contents.hide();
                    var d = g.contents.eq(b).show();
                    g.links.removeClass("tab_active__");
                    a.addClass("tab_active__");
                    if (c.preload === undefined || c.preload === false) {
                        if (c.url !== undefined && a.data("loaded") === undefined) {
                            B.loadContent.call(h, c.url, b)
                        }
                    }
                    if (g.onActive !== null) {
                        g.onActive.call(this, this, g.links, g.contents)
                    }
                    if (c.onOpen !== undefined && a.data("loaded")) {
                        var f = d.find(">").instance("cont");
                        if (f[c.onOpen] !== undefined) {
                            f[c.onOpen]()
                        } else {
                            N.warn("[N.tab.wrapEle]onOpen callback function \"" + c.onOpen + "\" is undefined in tab content's Service Controller")
                        }
                    }
                    if (g.effect) {
                        d.find(">").hide()[g.effect[0]](g.effect[1], g.effect[2])
                    }
                });
                $(g.links.get(j)).click()
            },
            loadContent: function(f, g) {
                var h = this.options;
                var i = this;
                N.comm({
                    url: f,
                    contentType: "application/x-www-form-urlencoded",
                    dataType: "html"
                }).submit(function(a) {
                    var b = h.contents.eq(g).html(a).find(">");
                    var c = h.links.eq(g);
                    var d = b.instance("cont");
                    d.request = this.request;
                    d.caller = i;
                    if (d !== undefined) {
                        if (d.init !== undefined) {
                            d.init(d.view, this.request)
                        }
                    }
                    if (c.hasClass("tab_active__")) {
                        var e = h.classOpts[g];
                        if (e.onOpen !== undefined) {
                            if (d[e.onOpen] !== undefined) {
                                d[e.onOpen]()
                            } else {
                                N.warn("[N.tab.loadContent]\"" + e.onOpen + "\" onOpen callback function is undefined in tab content's Service Controller")
                            }
                        }
                    }
                    c.data("loaded", true)
                })
            }
        });
        var C = N.select = function(a, b) {
            this.options = {
                data: a,
                context: null,
                key: null,
                val: null,
                append: true,
                direction: "h",
                type: 0,
                template: null
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["select"])
            } catch (e) {
                N.error("[N.select]" + e, e)
            }
            $.extend(this.options, N.element.toOpts(this.options.context));
            if (N.isPlainObject(b)) {
                $.extend(this.options, b);
                this.options.context = N(b.context)
            } else {
                this.options.context = N(b)
            }
            this.options.template = this.options.context;
            C.wrapEle.call(this);
            this.options.context.instance("select", this);
            return this
        };
        C.fn = C.prototype;
        $.extend(C.fn, {
            data: function(a) {
                var b = this.options;
                if (a !== undefined && a === true) {
                    var c = [];
                    $(b.context).vals(function(i) {
                        c.push(b.data[i])
                    });
                    return c
                } else {
                    return b.data.get()
                }
            },
            context: function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            bind: function() {
                opts = this.options;
                if (opts.type === 1 || opts.type === 2) {
                    var b = opts.template.find("option.select_default__").clone(true);
                    opts.context.addClass("select_template__").empty();
                    if (opts.append) {
                        opts.context.append(b)
                    }
                    opts.data.each(function(i, a) {
                        opts.context.append("<option value='" + a[opts.val] + "'>" + a[opts.key] + "</option>")
                    })
                } else if (opts.type === 3 || opts.type === 4) {
                    if (opts.context.filter(".select_template__").length == 0) {
                        var c = opts.context.attr("id");
                        opts.data.each(function(i, a) {
                            if (i === 0) {
                                opts.context.attr("name", c).attr("id", c + "_" + String(i)).attr("value", a[opts.val]).addClass("select_input__ select_template__")
                            } else {
                                opts.context.push($(opts.template.filter("input:eq(0)")).clone(true).attr("name", c).attr("id", c + "_" + String(i)).attr("value", a[opts.val]).removeClass("select_template__").get(0))
                            }
                            opts.context.push($('<label class="select_input_label__" for="' + c + "_" + String(i) + '">' + a[opts.key] + '</label>').get(0));
                            if (opts.direction === "v" && opts.data.length - 1 != i) {
                                opts.context.push($('<br class="select_input_br__" />').get(0))
                            }
                        });
                        $(opts.template.filter("input:eq(0)")).after(opts.context)
                    }
                }
                return this
            },
            val: function(a) {
                return $(this.options.context).vals(a)
            },
            reset: function(a) {
                opts = this.options;
                if (opts.type === 1 || opts.type === 2) {
                    if (a !== undefined && a === true) {
                        opts.context.get(0).selectedIndex = 0
                    } else {
                        opts.context.val(opts.context.prop("defaultSelected"))
                    }
                } else if (opts.type === 3 || opts.type === 4) {
                    opts.context.prop("checked", false)
                }
                return this
            }
        });
        $.extend(C, {
            wrapEle: function() {
                var a = this.options;
                if (a.context.is("select") && a.context.attr("multiple") != "multiple") {
                    this.options.context.find("option").addClass("select_default__");
                    a.type = 1
                } else if (a.context.is("select") && a.context.attr("multiple") == "multiple") {
                    this.options.context.find("option").addClass("select_default__");
                    a.type = 2
                } else if (a.context.is("input:radio")) {
                    a.type = 3
                } else if (a.context.is("input:checkbox")) {
                    a.type = 4
                }
            }
        });
        var D = N.form = function(a, b) {
            this.options = {
                data: N.type(a) === "array" ? N(a) : a,
                row: -1,
                context: null,
                validate: true,
                html: false,
                addTop: false,
                fRules: null,
                vRules: null,
                extObj: null,
                extRow: -1,
                revert: false
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["form"])
            } catch (e) {
                N.error("[N.form]" + e, e)
            }
            if (N.isPlainObject(b)) {
                $.extend(this.options, b);
                if (N.type(this.options.context) === "string") {
                    this.options.context = N(this.options.context)
                }
                if (b.row === undefined) {
                    this.options.row = 0
                }
            } else {
                this.options.row = 0;
                this.options.context = N(b)
            }
            this.options.context.addClass("form__");
            if (this.options.revert) {
                this.revertData = $.extend({}, this.options.data[this.options.row])
            }
            this.options.context.instance("form", this);
            if (this.options.extObj === null) {
                N.ds.instance(this, true)
            }
            return this
        };
        D.fn = D.prototype;
        $.extend(D.fn, {
            data: function(a) {
                var b = this.options;
                if (a !== undefined && a === true) {
                    return [b.data[b.row]]
                } else {
                    return b.data.get()
                }
            },
            row: function() {
                return this.options.row
            },
            context: function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            bind: function(f, g) {
                var h = this.options;
                if (f !== undefined) {
                    h.row = f
                }
                if (g !== undefined) {
                    h.data = g;
                    if (h.revert) {
                        this.revertData = $.extend({}, g[f])
                    }
                }
                var i = this;
                var j;
                if (!N.isEmptyObject(h.data) && !N.isEmptyObject(j = h.data[h.row])) {
                    var k, ele, val, tagName, type;
                    for (var l in j) {
                        k = $("#" + l, h.context);
                        type = N.string.trimToEmpty(k.attr("type")).toLowerCase();
                        if (k.length > 0 && type !== "radio" && type !== "checkbox") {
                            k.each(function() {
                                ele = $(this);
                                ele.removeClass("data_changed__");
                                tagName = this.tagName.toLowerCase();
                                type = N.string.trimToEmpty(ele.attr("type")).toLowerCase();
                                if (tagName === "textarea" || type === "text" || type === "password" || type === "hidden" || type === "file") {
                                    if (ele.data("validate") !== undefined) {
                                        if (type !== "hidden") {
                                            N().validator(h.fRules !== null ? h.fRules : ele);
                                            ele.unbind("focusout.form.validate");
                                            ele.bind("focusout.form.validate", function() {
                                                var a = $(this);
                                                if (!a.prop("disabled") && !a.prop("readonly")) {
                                                    if (h.validate) {
                                                        a.trigger("validate")
                                                    }
                                                }
                                            })
                                        }
                                    }
                                    ele.unbind("focusout.form.dataSync");
                                    ele.bind("focusout.form.dataSync", function() {
                                        var a = $(this);
                                        var b = a.val();
                                        if (String(j[a.attr("id")]) !== b) {
                                            if (!a.prop("disabled") && !a.prop("readonly") && !a.hasClass("validate_false__")) {
                                                j[a.attr("id")] = b;
                                                if (j["rowStatus"] != "insert") {
                                                    j["rowStatus"] = "update"
                                                }
                                                a.addClass("data_changed__");
                                                N.ds.instance(h.extObj !== null ? h.extObj : i).notify(h.extRow > -1 ? h.extRow : h.row, a.attr("id"))
                                            }
                                        }
                                    });
                                    ele.unbind("keyup.form.dataSync");
                                    ele.bind("keyup.form.dataSync", function(e) {
                                        if (e.which == 13) {
                                            e.preventDefault();
                                            $(this).trigger("focusout.form.validate");
                                            $(this).trigger("focusout.form.dataSync")
                                        }
                                    });
                                    if (ele.data("format") !== undefined) {
                                        if (type !== "password" && type !== "hidden" && type !== "file") {
                                            N(h.data).formatter(h.fRules !== null ? h.fRules : ele).format(h.row);
                                            ele.unbind("focusin.form.unformat");
                                            ele.bind("focusin.form.unformat", function() {
                                                var a = $(this);
                                                if (!a.prop("disabled") && !a.prop("readonly") && !a.hasClass("validate_false__")) {
                                                    a.trigger("unformat")
                                                }
                                            });
                                            ele.unbind("focusout.form.format");
                                            ele.bind("focusout.form.format", function() {
                                                var a = $(this);
                                                if (!a.prop("disabled") && !a.prop("readonly") && !a.hasClass("validate_false__")) {
                                                    a.trigger("format")
                                                }
                                            })
                                        }
                                    } else {
                                        ele.val(N.string.nullToEmpty(String(j[l])))
                                    }
                                } else if (tagName === "select") {
                                    if (ele.data("validate") !== undefined) {
                                        if (h.validate) {
                                            N().validator(h.fRules !== null ? h.fRules : ele)
                                        }
                                    }
                                    ele.unbind("change.form.dataSync");
                                    ele.bind("change.form.dataSync", function() {
                                        var a = $(this);
                                        var b = a.vals();
                                        if (j[a.attr("id")] !== b) {
                                            if (!a.prop("disabled") && !a.prop("readonly") && !a.hasClass("validate_false__")) {
                                                j[a.attr("id")] = b;
                                                if (j["rowStatus"] != "insert") {
                                                    j["rowStatus"] = "update"
                                                }
                                                a.addClass("data_changed__");
                                                N.ds.instance(h.extObj !== null ? h.extObj : i).notify(h.extRow > -1 ? h.extRow : h.row, a.attr("id"))
                                            }
                                        }
                                    });
                                    ele.vals(j[l])
                                } else if (tagName === "img") {
                                    ele.attr("src", N.string.nullToEmpty(String(j[l])))
                                } else {
                                    if (ele.data("format") !== undefined) {
                                        N(h.data).formatter(h.fRules !== null ? h.fRules : ele).format(h.row)
                                    } else {
                                        val = N.string.nullToEmpty(String(j[l]));
                                        if (!h.html) {
                                            ele.text(val)
                                        } else {
                                            ele.html(val)
                                        }
                                    }
                                }
                            })
                        } else {
                            k = $(h.context).find("input:radio[id^='" + l + "'], input:checkbox[id^='" + l + "']");
                            k.removeClass("data_changed__");
                            if (k.length > 0) {
                                k.vals(j[l]);
                                k.unbind("click.form.dataSync select.form.dataSync");
                                k.bind("click.form.dataSync select.form.dataSync", function() {
                                    var a = $(this);
                                    var b = a.attr("name");
                                    if (b === undefined) {
                                        b = a.attr("id")
                                    }
                                    var c = a.siblings("input:" + a.attr("type") + "[id^='" + a.attr("name") + "']");
                                    c.push(this);
                                    var d = c.vals();
                                    if (j[b] !== d) {
                                        if (!a.prop("disabled") && !a.prop("readonly")) {
                                            j[b] = d;
                                            if (j["rowStatus"] != "insert") {
                                                j["rowStatus"] = "update"
                                            }
                                            c.addClass("data_changed__");
                                            N.ds.instance(h.extObj !== null ? h.extObj : i).notify(h.extRow > -1 ? h.extRow : h.row, b)
                                        }
                                    }
                                })
                            }
                        }
                    }
                    k = val = undefined
                }
                return this
            },
            add: function() {
                var a = this.options;
                if (a.data === null) {
                    throw new Error("[Form.add]data is null. you must input data");
                }
                var b = N.element.toData(a.context.find(":input").not(":button"));
                if (b == null) {
                    b = {}
                }
                b.rowStatus = "insert";
                if (!a.addTop) {
                    a.data.push(b);
                    this.options.row = a.data.length - 1;
                    if (a.extObj !== null) {
                        a.extRow = a.extObj.data().length - 1
                    }
                } else {
                    a.data.splice(0, 0, b);
                    this.options.row = 0;
                    a.extRow = 0
                }
                N.ds.instance(a.extObj !== null ? a.extObj : this).notify(a.extRow > -1 ? a.extRow : a.row);
                this.update(a.row);
                return this
            },
            revert: function() {
                var a = this.options;
                if (!a.revert) {
                    N.error("[N.form.revert]Can not revert. N.form's revert option value is false")
                }
                $.extend(a.data[a.row], a.data[a.row], this.revertData);
                this.update(a.row);
                N.ds.instance(a.extObj !== null ? a.extObj : this).notify(a.extRow > -1 ? a.extRow : a.row);
                return this
            },
            validate: function() {
                var a = this.options;
                var b = a.context.find(":input");
                b.trigger("unformat.formatter");
                b.trigger("validate.validator");
                b.not(".validate_false__").trigger("format.formatter");
                return b.filter(".validate_false__").length > 0 ? false : true
            },
            val: function(b, c, d) {
                if (c === undefined) {
                    return this.options.data[this.options.row][b]
                }
                var e = this.options;
                var f = e.data[e.row];
                var g, ele;
                var h = this;
                var i = false;
                var j = false;
                g = $(e.context).find("#" + b);
                if (g.length > 0) {
                    var k = g.get(0).tagName.toLowerCase();
                    var l = N.string.trimToEmpty(g.attr("type")).toLowerCase();
                    if (l !== "radio" && l !== "checkbox") {
                        g.each(function() {
                            ele = $(this);
                            if (ele.prop("readonly")) {
                                ele.removeAttr("readonly");
                                i = true
                            }
                            if (ele.prop("disabled")) {
                                ele.removeAttr("disabled");
                                j = true
                            }
                            if (k === "textarea" || l === "text" || l === "password" || l === "hidden" || l === "file") {
                                if (ele.data("format") !== undefined && ele.data("validate") !== undefined) {
                                    ele.val(String(c));
                                    if (l !== "hidden") {
                                        ele.trigger("focusout.form.validate")
                                    }
                                    ele.trigger("focusout.form.dataSync");
                                    if (!ele.is("input:password, input:hidden, input:file")) {
                                        ele.trigger("focusin.form.format");
                                        ele.trigger("focusout.form.unformat")
                                    }
                                } else {
                                    ele.val(String(c));
                                    ele.trigger("focusout.form.dataSync")
                                }
                            } else if (k === "select") {
                                ele.vals(c);
                                ele.trigger("change.form.dataSync")
                            } else if (k === "img") {
                                var a = String(c);
                                f[ele.attr("id")] = a;
                                if (f["rowStatus"] != "insert") {
                                    f["rowStatus"] = "update"
                                }
                                ele.addClass("data_changed__");
                                if (d === undefined || (d !== undefined && d === true)) {
                                    N.ds.instance(e.extObj !== null ? e.extObj : h).notify(e.extRow > -1 ? e.extRow : e.row, ele.attr("id"))
                                }
                                ele.attr("src", a)
                            } else {
                                var a = String(c);
                                f[ele.attr("id")] = a;
                                if (f["rowStatus"] != "insert") {
                                    f["rowStatus"] = "update"
                                }
                                ele.addClass("data_changed__");
                                if (d === undefined || (d !== undefined && d === true)) {
                                    N.ds.instance(e.extObj !== null ? e.extObj : h).notify(e.extRow > -1 ? e.extRow : e.row, ele.attr("id"))
                                }
                                if (ele.data("format") !== undefined) {
                                    N(e.data).formatter(e.fRules !== null ? e.fRules : ele).format(e.row)
                                } else {
                                    if (!e.html) {
                                        ele.text(a)
                                    } else {
                                        ele.html(a)
                                    }
                                }
                            }
                            if (i) {
                                ele.prop("readonly", true)
                            }
                            if (j) {
                                ele.prop("disabled", true)
                            }
                        })
                    } else {
                        g = $(e.context).find("input:radio[id^='" + b + "'], input:checkbox[id^='" + b + "']");
                        if (g.length > 0) {
                            g.vals(c);
                            $(g.get(0)).trigger("select.form.dataSync")
                        }
                    }
                } else {
                    this.options.data[this.options.row][b] = c
                }
                return this
            },
            update: function(a, b) {
                var c = this.options;
                if (b === undefined) {
                    this.bind(a)
                } else {
                    this.val(b, c.data[a][b], false)
                }
                N.element.dataChanged(c.context.find("#" + b + ", input:radio[id='" + b + "'][name='" + b + "'], input:checkbox[id='" + b + "'][name='" + b + "']"));
                return this
            }
        });
        var E = N.grid = function(b, c) {
            this.options = {
                data: N.type(b) === "array" ? N(b) : b,
                removedData: [],
                context: null,
                heigth: 0,
                validate: true,
                html: false,
                addTop: false,
                resizable: false,
                vResizable: false,
                sortable: false,
                windowScrollLock: false,
                select: false,
                multiselect: false,
                hover: false,
                revert: false,
                createRowDelay: 1,
                scrollPaging: {
                    idx: 0,
                    size: 100
                },
                fRules: null,
                vRules: null,
                rowHandler: null,
                onSelect: null,
                onBind: null
            };
            try {
                this.options = $.extend({}, this.options, N.context.attr("ui")["grid"]);
                this.options.scrollPaging = $.extend({}, this.options.scrollPaging, N.context.attr("ui")["grid"]["scrollPaging"])
            } catch (e) {
                N.error("[N.grid]" + e, e)
            }
            if (N.isPlainObject(c)) {
                $.extend(this.options, c);
                if (c.scrollPaging !== undefined) {
                    $.extend(this.options.scrollPaging, c.scrollPaging)
                }
                this.options.scrollPaging.limit = this.options.scrollPaging.size;
                if (N.type(this.options.context) === "string") {
                    this.options.context = N(this.options.context)
                }
            } else {
                this.options.context = N(c)
            }
            this.tbodyTemp = this.options.context.find("> tbody").clone(true, true);
            this.options.context.addClass("grid__");
            if (this.options.hover) {
                this.options.context.addClass("grid_hover__")
            }
            if (this.options.select || this.options.multiselect) {
                this.options.context.addClass("grid_select__");
                var d = this;
                this.tbodyTemp.bind("click.grid.tbody", function() {
                    var a = $(this);
                    if (a.hasClass("grid_selected__")) {
                        a.removeClass("grid_selected__")
                    } else {
                        if (!d.options.multiselect) {
                            d.options.context.find("> tbody").removeClass("grid_selected__")
                        }
                        a.addClass("grid_selected__");
                        if (d.options.onSelect !== null) {
                            d.options.onSelect.call(a, a.index() - 1, a, d.options.data)
                        }
                    }
                })
            }
            this.cellCnt = E.cellCnt(this.tbodyTemp);
            if (this.options.height > 0) {
                E.fixHeader.call(this)
            }
            this.thead = E.setTheadCellInfo.call(this);
            if (this.options.sortable) {
                E.sort.call(this)
            }
            if (this.options.resizable) {
                E.resize.call(this)
            }
            this.options.context.instance("grid", this);
            N.ds.instance(this, true);
            return this
        };
        E.fn = E.prototype;
        $.extend(E.fn, {
            data: function(a) {
                if (a === undefined) {
                    return this.options.data.get()
                } else if (a === "modified") {
                    return this.options.data.datafilter("data.rowStatus !== undefined").get().concat(this.options.removedData)
                } else if (a === "delete") {
                    return this.options.removedData
                } else {
                    return this.options.data.datafilter("data.rowStatus === '" + a + "'").get()
                }
            },
            context: function(a) {
                return a !== undefined ? this.options.context.find(a) : this.options.context
            },
            bind: function(a) {
                var b = this.options;
                this.thead.find("span.sortable__").remove();
                b.removedData = [];
                var c = arguments[1] !== undefined && arguments[1] === true ? true : false;
                if (a !== undefined) {
                    b.data = N.type(a) === "array" ? N(a) : a
                }
                var d;
                if (b.data.length > 0) {
                    b.context.find("tbody").clearQueue().stop();
                    if (!c) {
                        b.scrollPaging.idx = 0
                    }
                    if (b.scrollPaging.idx === 0) {
                        b.context.find("tbody").remove()
                    }
                    var i = b.scrollPaging.idx;
                    var e = this;
                    var f;
                    if (b.height > 0) {
                        f = Math.min(b.scrollPaging.limit, b.data.length)
                    } else {
                        f = b.data.length
                    }
                    var g;
                    var e = this;
                    var h = b.createRowDelay;
                    var j;
                    var k = function() {
                        d = e.tbodyTemp.clone(true, true).hide();
                        b.context.append(d);
                        if (b.rowHandler !== null) {
                            b.rowHandler.call(d, i, d, b.data[i])
                        }
                        N(b.data[i]).form({
                            context: d,
                            html: b.html,
                            validate: b.validate,
                            extObj: e,
                            extRow: i,
                            revert: b.revert
                        }).bind();
                        d.show(h, function() {
                            i++;
                            j = b.scrollPaging.idx + f - 1;
                            if (i === j) {
                                h = 0
                            } else {
                                h = b.createRowDelay
                            }
                            if (i <= j) {
                                k()
                            } else if (i === j + 1) {
                                if (b.onBind !== null) {
                                    b.onBind.call(b.context, b.context, b.data)
                                }
                                b.scrollPaging.limit = b.scrollPaging.size
                            }
                        })
                    };
                    k()
                } else {
                    b.context.find("tbody").remove();
                    b.context.append('<tbody><tr><td class="empty__" align="center" colspan="' + this.cellCnt + '">' + N.message.get(b.message, "empty") + '</td></tr></tbody>');
                    b.context.append(d)
                }
                return this
            },
            add: function() {
                var a = this.options;
                if (a.context.find("td.empty__").length > 0) {
                    a.context.find("tbody").remove()
                }
                var b = this.tbodyTemp.clone(true, true);
                if (a.addTop) {
                    a.context.find("thead").after(b)
                } else {
                    a.context.append(b)
                }
                a.data.form({
                    context: b,
                    html: a.html,
                    validate: a.validate,
                    extObj: this,
                    extRow: a.addTop ? 0 : a.data.length,
                    addTop: a.addTop
                }).add();
                b.find(":input:eq(0)").get(0).focus();
                return this
            },
            remove: function(a) {
                var b = this.options;
                if (a === undefined || a > b.data.length - 1) {
                    N.error("[N.grid.remove]Row index out of range")
                }
                b.context.find("tbody:eq(" + a + ")").remove();
                if (b.data[a].rowStatus === "insert") {
                    b.data.splice(a, 1)
                } else {
                    var c = b.data.splice(a, 1)[0];
                    c["rowStatus"] = "delete";
                    b.removedData.push(c)
                }
                N.ds.instance(this).notify();
                return this
            },
            revert: function(a) {
                var b = this.options;
                if (!b.revert) {
                    N.error("[N.form.revert]Can not revert. N.form's revert option value is false")
                }
                if (a !== undefined) {
                    b.context.find("tbody:eq(" + String(a) + ")").instance("form").revert()
                } else {
                    b.context.find("tbody").instance("form", function(i) {
                        if (this.options !== undefined && this.options.data[0].rowStatus === "update") {
                            this.revert()
                        }
                    })
                }
                return this
            },
            validate: function(a) {
                var b = this.options;
                var c = true;
                if (a !== undefined) {
                    b.context.find("tbody:eq(" + String(a) + ")").instance("form").validate()
                } else {
                    var d;
                    b.context.find("tbody").instance("form", function(i) {
                        if (this.options !== undefined && this.options.data.length > 0) {
                            d = this.options.data[0].rowStatus;
                            if (d === "update" || d === "insert") {
                                if (!this.validate()) {
                                    c = false
                                }
                            }
                        }
                    })
                }
                return c
            },
            val: function(a, b, c) {
                if (c === undefined) {
                    return this.options.context.find("tbody:eq(" + String(a) + ")").instance("form").val(b)
                }
                this.options.context.find("tbody:eq(" + String(a) + ")").instance("form").val(b, c);
                return this
            },
            update: function(a, b) {
                if (a === undefined) {
                    this.bind()
                } else {
                    this.options.context.find("tbody:eq(" + String(a) + ")").instance("form").update(0, b)
                }
                return this
            }
        });
        $.extend(E, {
            fixHeader: function() {
                var c = this.options;
                c.addTop = true;
                c.context.css({
                    "table-layout": "fixed",
                    "margin": "0"
                });
                var d = c.context.find("tbody td:eq(0)");
                var e = d.css("border-left-width") + " " + d.css("border-left-style") + " " + d.css("border-left-color");
                var f = d.css("border-bottom-width") + " " + d.css("border-bottom-style") + " " + d.css("border-bottom-color");
                var g = c.context.wrap('<div class="grid_wrap__"/>').parent();
                g.css({
                    "border-left": e
                });
                var h = N.browser.scrollbarWidth();
                var i = c.context.clone(true, true);
                i.find("tbody").remove();
                i.find("tfoot").remove();
                var j = i.wrap('<div class="thead_wrap__"/>').parent().css({
                    "padding-right": h + "px",
                    "margin-left": "-1px"
                });
                g.prepend(j);
                c.context.find("> thead th").empty().css({
                    "height": "0",
                    "padding-top": "0",
                    "padding-bottom": "0",
                    "border-top": "none",
                    "border-bottom": "none"
                });
                c.context.find("> tbody td").css({
                    "border-top": "none"
                });
                this.tbodyTemp.find("td").css({
                    "border-top": "none"
                });
                var k = c.context.wrap('<div class="tbody_wrap__"/>').parent().css({
                    "height": String(c.height) + "px",
                    "overflow-y": "scroll",
                    "margin-left": "-1px",
                    "border-bottom": f
                });
                if (N.browser.is("ie")) {
                    k.css("overflow-x", "hidden")
                }
                if (c.windowScrollLock) {
                    c.context.bind("mouseenter.grid.fixHeader", function() {
                        var a = [self.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, self.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop];
                        var b = $('html');
                        b.data('scroll-position', a);
                        b.data('previous-overflow', b.css('overflow'));
                        b.css('overflow', 'hidden');
                        F.scrollTo(a[0], a[1]);
                        if ($(F.document).height() > $(F).height()) {
                            $("body").css("margin-right", "+=" + h + "px")
                        }
                    });
                    c.context.bind("mouseleave.grid.fixHeader", function() {
                        var a = $('html');
                        var b = a.data('scroll-position');
                        a.css('overflow', a.data('previous-overflow'));
                        F.scrollTo(b[0], b[1]);
                        if ($(F.document).height() > $(F).height()) {
                            $("body").css("margin-right", "-=" + h + "px")
                        }
                    })
                }
                var l = this;
                var m = c.scrollPaging.limit;
                var n;
                k.scroll(function() {
                    var a = $(this);
                    if (a.scrollTop() >= c.context.height() - a.height()) {
                        n = c.context.find("> tbody").length;
                        if (n === c.scrollPaging.idx + m) {
                            if (n > 0 && n <= c.data.length) {
                                c.scrollPaging.idx += m
                            }
                            if (c.scrollPaging.idx + c.scrollPaging.limit >= c.data.length) {
                                c.scrollPaging.limit = c.data.length - c.scrollPaging.idx
                            } else {
                                c.scrollPaging.limit = m
                            }
                            if (c.scrollPaging.idx < c.data.length) {
                                l.bind(undefined, true)
                            }
                        }
                    }
                });
                var o;
                if (c.context.find("> tfoot").length > 0) {
                    var p = c.context.clone(true, true);
                    c.context.find("> tfoot").remove();
                    p.find("thead").remove();
                    p.find("tbody").remove();
                    o = p.wrap('<div class="tfoot_wrap__"/>').parent().css({
                        "padding-right": h + "px",
                        "margin-left": "-1px"
                    });
                    g.append(o)
                }
                if (c.vResizable) {
                    E.vResize.call(this, g, k, o)
                }
            },
            vResize: function(a, b, c) {
                var d = false;
                var f = $('<div class="v_resizable__" align="center"></div>');
                f.css("cursor", "n-resize");
                var g, tbodyOffset, tfootHeight = 0;
                f.bind("mousedown.grid.vResize", function() {
                    if (c !== undefined) {
                        tfootHeight = c.height()
                    }
                    tbodyOffset = b.offset();
                    $(document).bind("dragstart.grid.vResize, selectstart.grid.vResize", function() {
                        return false
                    });
                    d = true;
                    $(F.document).bind("mousemove.grid.vResize", function(e) {
                        if (d) {
                            g = (e.pageY - tbodyOffset.top - tfootHeight) + "px";
                            b.css({
                                "height": g,
                                "max-height": g
                            })
                        }
                    });
                    $(F.document).bind("mouseup.grid.vResize", function() {
                        $(document).unbind("dragstart.grid.vResize, selectstart.grid.vResize, mousemove.grid.vResize, mouseup.grid.vResize");
                        d = false
                    })
                });
                a.after(f)
            },
            resize: function() {
                var d = this.options;
                var f = this.thead.find("> tr th");
                var g;
                var h;
                var i = false;
                var j;
                var k;
                var l;
                var m;
                var n;
                var o;
                var p;
                var q;
                var r;
                var s;
                var t;
                var u = N.browser.scrollbarWidth();
                if (N.browser.is("safari")) {
                    f.css("padding-left", "0");
                    f.css("padding-right", "0")
                }
                f.each(function() {
                    j = $(this);
                    g = j.append('<span class="resize_bar__"></span>').find("span.resize_bar__");
                    var c = 6;
                    if (N.browser.is("ie") || N.browser.is("firefox")) {
                        t = String(j.innerHeight())
                    } else {
                        t = String(j.innerHeight() + 1)
                    }
                    g.css({
                        "padding": "0px",
                        "margin": "-" + j.css("padding-top") + " -" + (c / 2 + parseInt(j.css("padding-right"))) + "px -" + j.css("padding-bottom") + " 0",
                        "height": t + "px",
                        "float": "right",
                        "width": c + "px",
                        "cursor": "e-resize"
                    });
                    g.bind("mousedown.grid.resize", function(e) {
                        r = e.pageX;
                        q = $(e.target);
                        m = q.parent("th");
                        currNextCellEle = q.parent("th").next();
                        if (d.height > 0) {
                            o = d.context.find("thead th:eq(" + f.index(m) + ")");
                            targetNextCellEle = d.context.find("thead th:eq(" + (f.index(m) + 1) + ")");
                            n = m.parents("table.grid__");
                            p = o.parents("div.tbody_wrap__")
                        }
                        m.data("sortLock", true);
                        k = m.innerWidth();
                        nextDefWidth = targetNextCellEle.innerWidth();
                        s = m.innerHeight() + 1;
                        $(document).bind("dragstart.grid.resize, selectstart.grid.resize", function() {
                            return false
                        });
                        i = true;
                        var a;
                        var b = u + 1;
                        if (N.browser.is("ie")) {
                            b = u + 3
                        } else if (N.browser.is("safari")) {
                            b = u
                        }
                        $(F.document).bind("mousemove.grid.resize", function(e) {
                            if (i) {
                                a = e.pageX - r;
                                l = k + a;
                                nextCurrWidth = nextDefWidth - a - b;
                                if (l > 0) {
                                    if (m.innerHeight() + 1 === s) {
                                        m.css("width", l + "px");
                                        currNextCellEle.css("width", nextCurrWidth + "px");
                                        if (o !== undefined) {
                                            o.css("width", l + "px");
                                            targetNextCellEle.css("width", nextCurrWidth + "px");
                                            p.width(n.width() + u)
                                        }
                                    } else {
                                        m.css("width", "");
                                        currNextCellEle.css("width", "");
                                        if (o !== undefined) {
                                            o.css("width", "");
                                            targetNextCellEle.css("width", "");
                                            p.width(n.width() + u)
                                        }
                                        i = false
                                    }
                                }
                            }
                        });
                        $(F.document).bind("mouseup.grid.resize", function(e) {
                            $(document).unbind("dragstart.grid.resize, selectstart.grid.resize, mousemove.grid.resize, mouseup.grid.resize");
                            i = false
                        })
                    })
                })
            },
            sort: function() {
                var c = this.options;
                var d = this.thead;
                var f = d.find("> tr th");
                f.css("cursor", "pointer");
                var g = this;
                f.bind("click.grid.sort", function(e) {
                    var a = $(this);
                    if (a.data("sortLock")) {
                        a.data("sortLock", false);
                        return false
                    }
                    if (c.data.length > 0) {
                        if (N.string.trimToNull($(this).text()) != null && $(this).find("input[type='checkbox']").length == 0) {
                            var b = false;
                            if (a.find("span.sortable__").hasClass("asc__")) {
                                b = true
                            }
                            if (b) {
                                g.bind(N(c.data).datasort($(this).data("id"), true));
                                a.append('<span class="sortable__ desc__">' + c.sortableItem.asc + '</span>')
                            } else {
                                g.bind(N(c.data).datasort($(this).data("id")));
                                a.append('<span class="sortable__ asc__">' + c.sortableItem.desc + '</span>')
                            }
                        }
                    }
                })
            },
            serverPaging: function() {},
            setTheadCellInfo: function() {
                var a = this.options;
                var b;
                if (a.height > 0) {
                    b = a.context.closest("div.grid_wrap__").find("> div.thead_wrap__ thead")
                } else {
                    b = a.context.find("thead")
                }
                var c;
                this.tbodyTemp.find("> tr td").each(function(i) {
                    c = $(this).attr("id");
                    if (c === undefined) {
                        c = $(this).find("*").attr("id")
                    }
                    b.find("> tr th:eq(" + i + ")").data("id", c)
                });
                return b
            },
            cellCnt: function(c) {
                return Math.max.apply(null, $.map(c.find("tr"), function(a) {
                    var b = 0;
                    $(a).find("td, th").each(function() {
                        b += N.string.trimToZero($(this).attr("colspan")) == "0" ? 1 : Number(N.string.trimToZero($(this).attr("colspan")))
                    });
                    return b
                }))
            }
        })
    })(N)
})(window, jQuery);